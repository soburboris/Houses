import * as R from 'ramda'
import {parse} from 'query-string'

export const limit = 21

export const getPaginator = search => {
    let parsedSearch = parse(search)        //Number(R.replace('?page','',search))
    let currentPage= parsedSearch.page ? Number(parsedSearch.page) : 1
    // console.log('parsedSearch', parse(search))
    let offset = currentPage*limit - limit
    return {currentPage, offset}
  
    
}

export const getHouseById = (state, id) => R.prop(id, state.houses) // state.phones[id]

export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)

export const getHouses = (state, ownProps) => {
    // const activeCategoryId = getActiveCategoryId(ownProps)

    // const applySearch = phone=> R.contains(
    //     state.phonesPage.search,
    //     phone.name //R.prop('name',phone)
    // )
    // const applyCategory = item => R.equals(
    //     activeCategoryId,
    //     R.prop('categoryId',item)
    // )         
    const houses = R.compose(
        // R.filter(applySearch),
        // R.when(R.always(activeCategoryId),R.filter(applyCategory)),
        R.map(id => getHouseById(state,id))
    )(state.housesPage.ids)

    // const phoneFilter = state.phonesPage.ids.map(id => getPhoneById(state, id))
    // const phones = activeCategoryId ? phoneFilter.filter(el => el.categoryId === activeCategoryId).filter(el => el.name.includes(state.phonesPage.search)) :
    //     phoneFilter.filter(el => el.name.includes(state.phonesPage.search))

    return houses
}

// export const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)

// export const getTotalBasketCount = state => R.length(state.basket)


// export const getTotalPrice = state => {

//     const totalPrice = R.compose(
//         R.sum,
//         R.pluck('price'),
//         R.map(id => getHouseById(state, id))
//     )(state.basket)

//     return totalPrice
// }

// export const getCategories = state => R.values(state.categories)

// export const getBasketPhonesWithCount = (state) => {

//     let phoneCount = id => R.compose(
//         R.length,
//         R.filter(basketId => basketId.id === id),
//         R.map(id => getHouseById(state, id))
//     )(state.basket)
//     const uniqueIds = R.uniq(state.basket)

//     const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)


//     const phones = R.compose(
//         R.map(phoneWithCount),
//         R.map(id => getHouseById(state, id))
//     )(uniqueIds)
//     console.log('phones', phones)


//     return phones
// }






