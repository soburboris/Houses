import * as R from 'ramda'
import {parse} from 'query-string'

export const limit =  9

export const getPaginator = search => {
    let parsedSearch = parse(search)        //Number(R.replace('?page','',search))
    let currentPage= parsedSearch.page ? Number(parsedSearch.page) : 1
    // console.log('parsedSearch', parse(search))
    let offset = currentPage*limit - limit
    return {currentPage, offset}
  
    
}

export const getHouseById = (state, id) => R.prop(id, state.houses) // state.phones[id]

// export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)

export const getHouses = (state, ownProps) => {
    // const activeCategoryId = getActiveCategoryId(ownProps)

    const applySearchProduct = house => state.housesPage.search.product === ''  ? true : 
   R.includes(state.housesPage.search.product, house.product)
    
    const applySearchGarage = house => state.housesPage.search.garage === ''  ? true : 
    R.equals(Number(state.housesPage.search.garage), house.garage)

    const applySearchType = house => state.housesPage.search.type === ''  ? true : 
    R.includes(state.housesPage.search.type, house.type)
    
    // R.includes(state.housesPage.search.product, house.product); //=> true
 
    // const applyCategory = item => R.equals(
    //     activeCategoryId,
    //     R.prop('categoryId',item)
    // )         
    const houses = R.compose(
        R.filter(applySearchType),
        R.filter(applySearchGarage),
        R.filter(applySearchProduct),
        // R.when(R.always(activeCategoryId),R.filter(applyCategory)),
        R.map(id => getHouseById(state,id))
    )(state.housesPage.ids)

    // const phoneFilter = state.phonesPage.ids.map(id => getPhoneById(state, id))
    // const phones = activeCategoryId ? phoneFilter.filter(el => el.categoryId === activeCategoryId).filter(el => el.name.includes(state.phonesPage.search)) :
    //     phoneFilter.filter(el => el.name.includes(state.phonesPage.search))

    return houses
}




